package dnd

import (
	"fmt"
	"strings"
)

type Player struct {
	Name          string
	Class         string
	HPmax         int
	HP            int
	Level         int
	InventorySlot int
	Inventory     []string
	PoisonEffect  int
}

/*
func main() {
    player := SetInfo()
    DisplayInfo(player)
}
*/

func SetInfo() Player {
	//Nom (Fonctionnel)
	var inputName string
	fmt.Print("Write the name of your new character: ")
	fmt.Scan(&inputName)

	// Nettoyage console
	fmt.Print("\033[2J\033[3J\033[H")

	ComptInvalidName := 1
	var Name string
	valid := false
	for !valid {
		valid = true
		for i := 0; i < len(inputName); i++ {
			c := inputName[i]
			if !((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == ' ') {
				valid = false
				break
			}
		}
		if valid {
			Name = inputName
		} else {
			fmt.Println("// Invalid Name // x", ComptInvalidName)
			fmt.Println("Choose another name:")
			fmt.Scan(&inputName)
			ComptInvalidName++
			fmt.Println(strings.Repeat("\n", 21))
		}
	}

	//Classe (fonctionnel)
	var inputClass string
	var Class string
	ComptInvalidClass := 1
	for !(Class == "Warrior" || Class == "Mage") {
		fmt.Println("Choose your character's class:")
		fmt.Println("1 - Warrior")
		fmt.Println("2 - Mage")
		fmt.Scan(&inputClass)
		fmt.Println(strings.Repeat("\n", 21))

		if inputClass == "1" {
			Class = "Warrior"
		} else if inputClass == "2" {
			Class = "Mage"
		} else {
			fmt.Println("// Invalid Class // x", ComptInvalidClass)
			ComptInvalidClass++
		}
	}

	//stats en fonction de la classe
	var HPmax, HP, Level int
	var InventorySlot int
	var Inventory []string
	if Class == "Warrior" {
		HPmax = 100
		HP = 100
		Level = 1
		InventorySlot = 5
		Inventory = []string{}
	} else if Class == "Mage" {
		HPmax = 75
		HP = 75
		Level = 1
		InventorySlot = 10
		Inventory = []string{}
	}
	//Autres infos
	var PoisonEffect int

	//retour d'infos
	fmt.Println(strings.Repeat("\n", 21))
	fmt.Println("Informations on your new character:")
	fmt.Println("Name \t\t:", Name)
	fmt.Println("Class \t\t:", Class)
	fmt.Println("HP max \t\t:", HPmax)
	fmt.Println("HP \t\t:", HP)
	fmt.Println("Level \t\t:", Level)
	fmt.Println("Inventory slots :", InventorySlot)
	fmt.Println("Inventory items :", Inventory)

	return Player{
		Name:          Name,
		Class:         Class,
		HPmax:         HPmax,
		HP:            HP,
		Level:         Level,
		InventorySlot: InventorySlot,
		Inventory:     Inventory,
		PoisonEffect:  PoisonEffect,
	}
}

func DisplayInfo(p Player) {
	fmt.Println("Informations on your character:")
	fmt.Println("------------------------------")
	fmt.Println("Name \t\t:", p.Name)
	fmt.Println("Class \t\t:", p.Class)
	fmt.Println("HP max \t\t:", p.HPmax)
	fmt.Println("HP \t\t:", p.HP)
	fmt.Println("Level \t\t:", p.Level)
	fmt.Println("Inventory slots :", p.InventorySlot)
	fmt.Println("Inventory items :", p.Inventory)
	fmt.Println("Poison effect for :", p.PoisonEffect, "turn(s)")
}

func AccessInventory(p Player) {
	fmt.Println(p.Inventory)

}



=============================================

package dnd

import (
	"fmt"
)

func TakeHealPot(p Player) {
	if p.HP < p.HPmax/2 { // issue de la structure Player
		p.HP += p.HPmax / 2
	} else {
		p.HP = p.HPmax
	}
}

func PoisonPot(p Player) {
	if p.PoisonEffect > 0 { //Affecter une valeur de poison directement pendant le combat // issue de la structure Player
		p.HP -= 15
		p.PoisonEffect -= 1
		fmt.Println("Tu as pris 15 HP à cause du poison, il te reste", p.PoisonEffect, "tours de poison")
	}
	if p.HP < 1 {
		//	projet_red_dnd.IsDead() //IsDead pas encore définie
	}
}



=======================================================================

package main

import (
	"dnd"
	"fmt"
)

func main() {
	dnd.ClearScreen()
	fmt.Println("Welcome to the Game!")
	p := dnd.SetInfo()
	dnd.ClearScreen()
	fmt.Println("-------------------")
	dnd.Menu(p)
}


=================================================

package dnd

import (
    "fmt"
    "os"
)

// main menu function
func Menu(p Player) {
	lastMsg := ""
	for {
		ClearScreen()
		if lastMsg != "" {
			fmt.Println(lastMsg)
			fmt.Println()
			lastMsg = ""
		}
		fmt.Println("-------------------")
		fmt.Println("Menu:")
		fmt.Println("\033[36m1. Character info\033[0m")
		fmt.Println("\033[32m2. Inventory\033[0m")
		fmt.Println("\033[33m3. Shop\033[0m")
		fmt.Println("\033[35m4. Blacksmith\033[0m")
		fmt.Println("\033[31m5. Exit\033[0m")
		fmt.Print("Choose an option: ")

		var choice int
		fmt.Scanln(&choice)

		switch choice {
		case 1:
			ClearScreen()
            DisplayInfo(p)
			fmt.Println()
			fmt.Print("Press Enter to return to menu...")
			var _pause byte
			fmt.Scanf("%c", &_pause)
			lastMsg = "\033[36mCharacter info displayed.\033[0m"
		case 2:
			ClearScreen()
			fmt.Println("Inventory:")
            AccessInventory(p)
			fmt.Println()
			fmt.Print("Press Enter to return to menu...")
			var _pause2 byte
			fmt.Scanf("%c", &_pause2)
			lastMsg = "\033[32mInventory displayed.\033[0m"
		case 3:
			lastMsg = "\033[33mShop selected.\033[0m"
			AccessShop()
		case 4:
			lastMsg = "\033[35mBlacksmith selected.\033[0m"
			Blacksmith()
		case 5:
			ClearScreen()
			fmt.Println("\033[31m\033[1mExiting the game.\033[0m")
			os.Exit(0)
		default:
			lastMsg = "\033[37mInvalid choice, please try again.\033[0m"
		}
	}
}

func AccessShop() {
	lastMsg := ""
	for {
		ClearScreen()
		if lastMsg != "" {
			fmt.Println(lastMsg)
			fmt.Println()
			lastMsg = ""
		}
		// const maxBackpackLevel = 3
		// fmt.Println("You have \033[33m\033[1m", Player.gold, "gold\033[0m.") // commented: Player undefined during testing
		fmt.Println("Here is what the shop has to offer:")
		fmt.Println("-----------------------------------")
		fmt.Println("1. Health potion \t\t: \033[33m\033[1m3 \tgold\033[0m")
		fmt.Println("2. Poison potion \t\t: \033[33m\033[1m6 \tgold\033[0m")
		fmt.Println("3. Spell book \t: \033[31m\033[1mFireball\033[0m \t: \033[33m\033[1m25 \tgold\033[0m")
		fmt.Println("4. Wolf fur \t\t\t: \033[33m\033[1m4 \tgold\033[0m")
		fmt.Println("5. Troll leather \t\t: \033[33m\033[1m7 \tgold\033[0m")
		fmt.Println("6. Boar leather \t\t: \033[33m\033[1m3 \tgold\033[0m")
		fmt.Println("7. Crow feather \t\t: \033[33m\033[1m1 \tgold\033[0m")
		// if Player.BackpackLevel < maxBackpackLevel {
		//     fmt.Println("8. Backpack upgrade \t\t: \033[33m30\033[1m \tgold\033[0m")
		// } else {
		//     fmt.Println("8. \033[9mBackpack upgrade\033[0m \t\t: \033[31m\033[1mMAX CAPACITY REACHED\033[0m")
		// }
		fmt.Println("8. Backpack upgrade \t\t: \033[33m\033[1m30 \tgold\033[0m")
		fmt.Println("-----------------------------------")
		fmt.Println("9. Exit shop")
		fmt.Print("Choose an option: ")

		var choice int
		fmt.Scanln(&choice)

		switch choice {
		case 1:
			// if Player.gold >= 3 { Player.gold -= 3; lastMsg = "You bought a Health potion." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Health potion purchase simulated."
		case 2:
			// if Player.gold >= 6 { Player.gold -= 6; lastMsg = "You bought a Poison potion." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Poison potion purchase simulated."
		case 3:
			// if Player.gold >= 25 { Player.gold -= 25; lastMsg = "You bought a Spell book : Fireball." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Spell book purchase simulated."
		case 4:
			// if Player.gold >= 4 { Player.gold -= 4; lastMsg = "You bought a Wolf fur." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Wolf fur purchase simulated."
		case 5:
			// if Player.gold >= 7 { Player.gold -= 7; lastMsg = "You bought a Troll leather." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Troll leather purchase simulated."
		case 6:
			// if Player.gold >= 3 { Player.gold -= 3; lastMsg = "You bought a Boar leather." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Boar leather purchase simulated."
		case 7:
			// if Player.gold >= 1 { Player.gold -= 1; lastMsg = "You bought a Crow feather." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Crow feather purchase simulated."
		case 8:
			// if Player.BackpackLevel >= maxBackpackLevel { lastMsg = "Your backpack is already at maximum capacity." } else if Player.gold >= 30 { Player.gold -= 30; Player.BackpackLevel++; lastMsg = "You bought a Backpack upgrade." } else { lastMsg = "You don't have enough gold." }
			lastMsg = "[test] Backpack upgrade simulated."
		case 9:
			ClearScreen()
			fmt.Println("Exiting the shop.")
			return
		default:
			lastMsg = "Invalid choice, please try again."
		}
	}
}

func Blacksmith() {
	lastMsg := ""
	for {
		ClearScreen()
		if lastMsg != "" {
			fmt.Println(lastMsg)
			fmt.Println()
			lastMsg = ""
		}
		// fmt.Println("You have :\n- \033[33m\033[1m", Player.gold, "gold\033[0m\n- \033[35m\033[1m", Player.CrowFeather, "Crow feather(s)\033[0m\n- \033[35m\033[1m", Player.BoarLeather, "Boar leather(s)\033[0m\n- \033[35m\033[1m", Player.WolfFur, "Wolf fur(s)\033[0m\n- \033[35m\033[1m", Player.TrollLeather, "Troll leather(s)\033[0m")
		fmt.Println("You have: [test values hidden during build]")
		fmt.Println("Welcome to the Blacksmith!")
		fmt.Println("Here is what the Blacksmith has to offer:")
		fmt.Println("-----------------------------------")
		fmt.Println("1. Adventurer's hat \t\t: \033[33m\033[1m5 \tgold\033[0m | \033[35m1 Crow feather\033[0m \t| \033[35m1 Boar leather\033[0m \t|")
		fmt.Println("2. Adventurer's tunic \t\t: \033[33m\033[1m5 \tgold\033[0m | \033[35m2 Wolf fur\033[0m \t| \033[35m1 Troll leather\033[0m \t|")
		fmt.Println("3. Adventurer's boots \t\t: \033[33m\033[1m5 \tgold\033[0m | \033[35m1 Wolf fur\033[0m \t| \033[35m1 Boar leather\033[0m \t|")
		fmt.Println("-----------------------------------")
		fmt.Println("4. Exit Blacksmith")
		fmt.Print("Choose an option: ")

		var choice int
		fmt.Scanln(&choice)

		switch choice {
		case 1:
			// Crafting logic commented for testing (Player undefined)
			lastMsg = "[test] Crafted Adventurer's hat (simulated)."
		case 2:
			// Crafting logic commented for testing (Player undefined)
			lastMsg = "[test] Crafted Adventurer's tunic (simulated)."
		case 3:
			// Crafting logic commented for testing (Player undefined)
			lastMsg = "[test] Crafted Adventurer's boots (simulated)."
		case 4:
			ClearScreen()
			fmt.Println("Exiting the Blacksmith.")
			return
		default:
			lastMsg = "Invalid choice, please try again."
		}
	}
}

func FightMenu() {
	// isFighting := true
	ClearScreen()
	// displayEnemyInfo()
	// displayPlayerInfo()

	fmt.Println("Fight Menu:")
	fmt.Println("-------------------")
	fmt.Println("1. \033[31mAttack\033[0m")
	fmt.Println("2. \033[32mInventory\033[0m")
	fmt.Println("Choose an option: ")

	var choice int
	fmt.Scanln(&choice)

	switch choice {
	case 1:
		//attack()
	case 2:
		// accessInventory()
	default:
		fmt.Println("Invalid choice, please try again.")
	}
}

func ClearScreen() {
	fmt.Print("\033[2J\033[3J\033[H")
}
